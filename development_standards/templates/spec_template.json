{
  "name": "ClaudeCode Specification Template",
  "description": "Template for creating detailed specifications for ClaudeCode features and components",
  "version": "1.0.0",
  "template_type": "specification",
  "metadata": {
    "created_by": "ClaudeCode Configuration System",
    "created_date": "2024-12-17",
    "last_updated": "2024-12-17",
    "schema_version": "1.0"
  },
  "structure": {
    "header": {
      "title": {
        "type": "string",
        "required": true,
        "description": "Clear, descriptive specification title",
        "format": "# {Component/Feature Name} Specification",
        "examples": [
          "# Configuration Validator Specification",
          "# Progress Tracking System Specification",
          "# Workflow Engine Specification"
        ]
      },
      "version": {
        "type": "string",
        "required": true,
        "pattern": "^\\d+\\.\\d+\\.\\d+$",
        "description": "Semantic version of the specification"
      },
      "status": {
        "type": "string",
        "required": true,
        "enum": ["draft", "review", "approved", "implemented", "deprecated"],
        "description": "Current status of the specification"
      },
      "authors": {
        "type": "array",
        "required": true,
        "items": {
          "type": "string"
        },
        "description": "Specification authors and contributors"
      },
      "reviewers": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Technical reviewers"
      },
      "related_phase": {
        "type": "string",
        "required": false,
        "pattern": "^P\\d+\\.\\d+(\\.\\d+)?$",
        "description": "Related implementation phase"
      }
    },
    "overview": {
      "purpose": {
        "type": "string",
        "required": true,
        "description": "Why this component/feature exists",
        "template": "## Purpose\n\nThis specification defines..."
      },
      "scope": {
        "type": "string",
        "required": true,
        "description": "What is and isn't covered",
        "template": "## Scope\n\n### In Scope\n- Feature 1\n- Feature 2\n\n### Out of Scope\n- Feature A\n- Feature B"
      },
      "assumptions": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Key assumptions made in this specification"
      },
      "constraints": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Technical or business constraints"
      }
    },
    "requirements": {
      "functional": {
        "type": "array",
        "required": true,
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "pattern": "^FR\\d{3}$",
              "description": "Functional requirement ID (FR001, FR002, etc.)"
            },
            "title": {
              "type": "string",
              "description": "Short requirement title"
            },
            "description": {
              "type": "string",
              "description": "Detailed requirement description"
            },
            "priority": {
              "type": "string",
              "enum": ["must-have", "should-have", "could-have", "won't-have"]
            },
            "acceptance_criteria": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["id", "title", "description", "priority"]
        }
      },
      "non_functional": {
        "type": "array",
        "required": true,
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "pattern": "^NFR\\d{3}$",
              "description": "Non-functional requirement ID"
            },
            "category": {
              "type": "string",
              "enum": ["performance", "security", "usability", "reliability", "scalability", "maintainability"]
            },
            "description": {
              "type": "string"
            },
            "metric": {
              "type": "string",
              "description": "How to measure this requirement"
            },
            "target": {
              "type": "string",
              "description": "Target value or threshold"
            }
          },
          "required": ["id", "category", "description"]
        }
      }
    },
    "architecture": {
      "overview": {
        "type": "string",
        "required": true,
        "description": "High-level architectural description",
        "template": "## Architecture Overview\n\n### Components\n- Component 1: Description\n- Component 2: Description\n\n### Data Flow\n1. Step 1\n2. Step 2\n3. Step 3"
      },
      "components": {
        "type": "array",
        "required": true,
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Component name"
            },
            "responsibility": {
              "type": "string",
              "description": "What this component does"
            },
            "interfaces": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["api", "cli", "config", "event"]
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            },
            "dependencies": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["name", "responsibility"]
        }
      },
      "data_models": {
        "type": "array",
        "required": false,
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "schema": {
              "type": "object",
              "description": "JSON schema or structure definition"
            }
          }
        }
      }
    },
    "implementation": {
      "technology_stack": {
        "type": "object",
        "required": false,
        "properties": {
          "language": {
            "type": "string",
            "examples": ["Python", "JavaScript", "Go"]
          },
          "frameworks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "libraries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tools": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "file_structure": {
        "type": "string",
        "required": false,
        "description": "Expected file and directory structure",
        "template": "```\nproject/\n├── src/\n│   ├── component1/\n│   └── component2/\n├── tests/\n└── docs/\n```"
      },
      "configuration": {
        "type": "object",
        "required": false,
        "description": "Configuration parameters and their descriptions"
      },
      "environment": {
        "type": "object",
        "required": false,
        "properties": {
          "python_version": {
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environment_variables": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "required": {
                  "type": "boolean"
                },
                "default": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "testing": {
      "strategy": {
        "type": "string",
        "required": true,
        "description": "Overall testing approach",
        "template": "## Testing Strategy\n\n### Unit Testing\n- Test coverage: 90%+\n- Framework: pytest\n\n### Integration Testing\n- Component interaction tests\n- API endpoint tests\n\n### System Testing\n- End-to-end workflows\n- Performance testing"
      },
      "test_cases": {
        "type": "array",
        "required": false,
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "pattern": "^TC\\d{3}$"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "preconditions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "steps": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "expected_result": {
              "type": "string"
            },
            "priority": {
              "type": "string",
              "enum": ["high", "medium", "low"]
            }
          },
          "required": ["id", "name", "description", "expected_result"]
        }
      },
      "performance_criteria": {
        "type": "object",
        "required": false,
        "properties": {
          "response_time": {
            "type": "string",
            "description": "Maximum acceptable response time"
          },
          "throughput": {
            "type": "string",
            "description": "Minimum required throughput"
          },
          "memory_usage": {
            "type": "string",
            "description": "Maximum memory usage"
          },
          "cpu_usage": {
            "type": "string",
            "description": "Maximum CPU usage"
          }
        }
      }
    },
    "deployment": {
      "prerequisites": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "What must be in place before deployment"
      },
      "installation_steps": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Step-by-step installation process"
      },
      "configuration_steps": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "Configuration steps after installation"
      },
      "verification": {
        "type": "array",
        "required": false,
        "items": {
          "type": "string"
        },
        "description": "How to verify successful deployment"
      }
    },
    "maintenance": {
      "monitoring": {
        "type": "string",
        "required": false,
        "description": "How to monitor the component in production"
      },
      "logging": {
        "type": "string",
        "required": false,
        "description": "Logging strategy and log levels"
      },
      "troubleshooting": {
        "type": "array",
        "required": false,
        "items": {
          "type": "object",
          "properties": {
            "problem": {
              "type": "string"
            },
            "symptoms": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "solution": {
              "type": "string"
            }
          }
        }
      },
      "backup_recovery": {
        "type": "string",
        "required": false,
        "description": "Backup and recovery procedures"
      }
    },
    "appendices": {
      "glossary": {
        "type": "object",
        "required": false,
        "description": "Definitions of technical terms"
      },
      "references": {
        "type": "array",
        "required": false,
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          }
        }
      },
      "revision_history": {
        "type": "array",
        "required": true,
        "items": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string"
            },
            "date": {
              "type": "string",
              "format": "date"
            },
            "author": {
              "type": "string"
            },
            "changes": {
              "type": "string"
            }
          },
          "required": ["version", "date", "author", "changes"]
        }
      }
    }
  },
  "templates": {
    "minimal": {
      "sections": ["header", "overview.purpose", "requirements.functional", "architecture.overview", "testing.strategy"],
      "description": "Minimal specification template for simple components"
    },
    "standard": {
      "sections": ["header", "overview", "requirements", "architecture", "implementation.technology_stack", "testing", "deployment.installation_steps"],
      "description": "Standard specification template for most components"
    },
    "comprehensive": {
      "sections": "*",
      "description": "Complete specification template for complex systems"
    }
  },
  "validation_rules": {
    "required_sections": ["header", "overview.purpose", "requirements.functional"],
    "naming_conventions": {
      "functional_requirements": "^FR\\d{3}$",
      "non_functional_requirements": "^NFR\\d{3}$",
      "test_cases": "^TC\\d{3}$"
    },
    "cross_references": {
      "requirements_to_tests": "Every functional requirement should have corresponding test cases",
      "components_to_interfaces": "Every component should define its interfaces"
    }
  },
  "automation": {
    "generation_hints": [
      "Use consistent naming conventions throughout",
      "Ensure all requirements are testable",
      "Include performance criteria for all components",
      "Cross-reference related specifications",
      "Keep language clear and unambiguous"
    ],
    "review_checklist": [
      "All required sections completed",
      "Requirements are clear and testable",
      "Architecture aligns with requirements",
      "Test strategy covers all requirements",
      "Non-functional requirements are measurable"
    ]
  }
}
